{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anand\\\\OneDrive\\\\Desktop\\\\Important Files and Documents\\\\Mini Project\\\\dVoting-master\\\\client\\\\src\\\\component\\\\Admin\\\\Verification\\\\Verification.js\";\nimport React, { Component } from \"react\";\nimport Navbar from \"../../Navbar/Navigation\";\nimport NavbarAdmin from \"../../Navbar/NavigationAdmin\";\nimport AdminOnly from \"../../AdminOnly\";\nimport getWeb3 from \"../../../getWeb3\";\nimport Election from \"../../../contracts/Election.json\";\nimport \"./Verification.css\";\nexport default class Registration extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = async () => {\n      if (!window.location.hash) {\n        window.location = window.location + \"#loaded\";\n        window.location.reload();\n      }\n\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = Election.networks[networkId];\n        const instance = new web3.eth.Contract(Election.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3,\n          ElectionInstance: instance,\n          account: accounts[0]\n        }); // Total number of candidates\n\n        const candidateCount = await this.state.ElectionInstance.methods.getTotalCandidate().call();\n        this.setState({\n          candidateCount: candidateCount\n        }); // Admin account and verification\n\n        const admin = await this.state.ElectionInstance.methods.getAdmin().call();\n\n        if (this.state.account === admin) {\n          this.setState({\n            isAdmin: true\n          });\n        } // Total number of voters\n\n\n        const voterCount = await this.state.ElectionInstance.methods.getTotalVoter().call();\n        this.setState({\n          voterCount: voterCount\n        }); // Loading all the voters\n\n        for (let i = 0; i < this.state.voterCount; i++) {\n          const voterAddress = await this.state.ElectionInstance.methods.voters(i).call();\n          const voter = await this.state.ElectionInstance.methods.voterDetails(voterAddress).call();\n          this.state.voters.push({\n            address: voter.voterAddress,\n            name: voter.name,\n            phone: voter.phone,\n            hasVoted: voter.hasVoted,\n            isVerified: voter.isVerified,\n            isRegistered: voter.isRegistered\n          });\n        }\n\n        this.setState({\n          voters: this.state.voters\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    };\n\n    this.renderUnverifiedVoters = voter => {\n      const verifyVoter = async (verifiedStatus, address) => {\n        await this.state.ElectionInstance.methods.verifyVoter(verifiedStatus, address).send({\n          from: this.state.account,\n          gas: 1000000\n        });\n        window.location.reload();\n      };\n\n      return /*#__PURE__*/React.createElement(React.Fragment, null, voter.isVerified ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"container-list success\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        style: {\n          margin: \"7px 0px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }\n      }, \"AC: \", voter.address), /*#__PURE__*/React.createElement(\"table\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 17\n        }\n      }, \"Name\"), /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 17\n        }\n      }, \"Phone\"), /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 17\n        }\n      }, \"Voted\")), /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 17\n        }\n      }, voter.name), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 17\n        }\n      }, voter.phone), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 17\n        }\n      }, voter.hasVoted ? \"True\" : \"False\")))) : null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"container-list attention\",\n        style: {\n          display: voter.isVerified ? \"none\" : null\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"table\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 15\n        }\n      }, \"Account address\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 15\n        }\n      }, voter.address)), /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 15\n        }\n      }, \"Name\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 15\n        }\n      }, voter.name)), /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 15\n        }\n      }, \"Phone\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 15\n        }\n      }, voter.phone)), /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 15\n        }\n      }, \"Voted\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 15\n        }\n      }, voter.hasVoted ? \"True\" : \"False\")), /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 15\n        }\n      }, \"Verified\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 15\n        }\n      }, voter.isVerified ? \"True\" : \"False\")), /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 15\n        }\n      }, \"Registered\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 15\n        }\n      }, voter.isRegistered ? \"True\" : \"False\"))), /*#__PURE__*/React.createElement(\"div\", {\n        style: {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        className: \"btn-verification approve\",\n        disabled: voter.isVerified,\n        onClick: () => verifyVoter(true, voter.address),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }\n      }, \"Approve\"))));\n    };\n\n    this.state = {\n      ElectionInstance: undefined,\n      account: null,\n      web3: null,\n      isAdmin: false,\n      voterCount: undefined,\n      voters: []\n    };\n  } // refreshing once\n\n\n  render() {\n    if (!this.state.web3) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, this.state.isAdmin ? /*#__PURE__*/React.createElement(NavbarAdmin, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 33\n        }\n      }) : /*#__PURE__*/React.createElement(Navbar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 51\n        }\n      }), /*#__PURE__*/React.createElement(\"center\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }\n      }, \"Loading Web3, accounts, and contract...\"));\n    }\n\n    if (!this.state.isAdmin) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Navbar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(AdminOnly, {\n        page: \"Verification Page.\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(NavbarAdmin, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 11\n      }\n    }, \"Verification\"), /*#__PURE__*/React.createElement(\"small\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }\n    }, \"Total Voters: \", this.state.voters.length), this.state.voters.length < 1 ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-item info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 13\n      }\n    }, \"None has registered yet.\") : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-item info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"center\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 17\n      }\n    }, \"List of registered voters\")), this.state.voters.map(this.renderUnverifiedVoters))));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/anand/OneDrive/Desktop/Important Files and Documents/Mini Project/dVoting-master/client/src/component/Admin/Verification/Verification.js"],"names":["React","Component","Navbar","NavbarAdmin","AdminOnly","getWeb3","Election","Registration","constructor","props","componentDidMount","window","location","hash","reload","web3","accounts","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","setState","ElectionInstance","account","candidateCount","state","methods","getTotalCandidate","call","admin","getAdmin","isAdmin","voterCount","getTotalVoter","i","voterAddress","voters","voter","voterDetails","push","name","phone","hasVoted","isVerified","isRegistered","error","alert","console","renderUnverifiedVoters","verifyVoter","verifiedStatus","send","from","gas","margin","display","undefined","render","length","map"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport Navbar from \"../../Navbar/Navigation\";\nimport NavbarAdmin from \"../../Navbar/NavigationAdmin\";\n\nimport AdminOnly from \"../../AdminOnly\";\n\nimport getWeb3 from \"../../../getWeb3\";\nimport Election from \"../../../contracts/Election.json\";\n\nimport \"./Verification.css\";\n\nexport default class Registration extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ElectionInstance: undefined,\n      account: null,\n      web3: null,\n      isAdmin: false,\n      voterCount: undefined,\n      voters: [],\n    };\n  }\n\n  // refreshing once\n  componentDidMount = async () => {\n    if (!window.location.hash) {\n      window.location = window.location + \"#loaded\";\n      window.location.reload();\n    }\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = Election.networks[networkId];\n      const instance = new web3.eth.Contract(\n        Election.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, ElectionInstance: instance, account: accounts[0] });\n\n      // Total number of candidates\n      const candidateCount = await this.state.ElectionInstance.methods\n        .getTotalCandidate()\n        .call();\n      this.setState({ candidateCount: candidateCount });\n\n      // Admin account and verification\n      const admin = await this.state.ElectionInstance.methods.getAdmin().call();\n      if (this.state.account === admin) {\n        this.setState({ isAdmin: true });\n      }\n      // Total number of voters\n      const voterCount = await this.state.ElectionInstance.methods\n        .getTotalVoter()\n        .call();\n      this.setState({ voterCount: voterCount });\n      // Loading all the voters\n      for (let i = 0; i < this.state.voterCount; i++) {\n        const voterAddress = await this.state.ElectionInstance.methods\n          .voters(i)\n          .call();\n        const voter = await this.state.ElectionInstance.methods\n          .voterDetails(voterAddress)\n          .call();\n        this.state.voters.push({\n          address: voter.voterAddress,\n          name: voter.name,\n          phone: voter.phone,\n          hasVoted: voter.hasVoted,\n          isVerified: voter.isVerified,\n          isRegistered: voter.isRegistered,\n        });\n      }\n      this.setState({ voters: this.state.voters });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n      console.error(error);\n    }\n  };\n  renderUnverifiedVoters = (voter) => {\n    const verifyVoter = async (verifiedStatus, address) => {\n      await this.state.ElectionInstance.methods\n        .verifyVoter(verifiedStatus, address)\n        .send({ from: this.state.account, gas: 1000000 });\n      window.location.reload();\n    };\n    return (\n      <>\n        {voter.isVerified ? (\n          <div className=\"container-list success\">\n            <p style={{ margin: \"7px 0px\" }}>AC: {voter.address}</p>\n            <table>\n              <tr>\n                <th>Name</th>\n                <th>Phone</th>\n                <th>Voted</th>\n              </tr>\n              <tr>\n                <td>{voter.name}</td>\n                <td>{voter.phone}</td>\n                <td>{voter.hasVoted ? \"True\" : \"False\"}</td>\n              </tr>\n            </table>\n          </div>\n        ) : null}\n        <div\n          className=\"container-list attention\"\n          style={{ display: voter.isVerified ? \"none\" : null }}\n        >\n          <table>\n            <tr>\n              <th>Account address</th>\n              <td>{voter.address}</td>\n            </tr>\n            <tr>\n              <th>Name</th>\n              <td>{voter.name}</td>\n            </tr>\n            <tr>\n              <th>Phone</th>\n              <td>{voter.phone}</td>\n            </tr>\n            <tr>\n              <th>Voted</th>\n              <td>{voter.hasVoted ? \"True\" : \"False\"}</td>\n            </tr>\n            <tr>\n              <th>Verified</th>\n              <td>{voter.isVerified ? \"True\" : \"False\"}</td>\n            </tr>\n            <tr>\n              <th>Registered</th>\n              <td>{voter.isRegistered ? \"True\" : \"False\"}</td>\n            </tr>\n          </table>\n          <div style={{}}>\n            <button\n              className=\"btn-verification approve\"\n              disabled={voter.isVerified}\n              onClick={() => verifyVoter(true, voter.address)}\n            >\n              Approve\n            </button>\n          </div>\n        </div>\n      </>\n    );\n  };\n  render() {\n    if (!this.state.web3) {\n      return (\n        <>\n          {this.state.isAdmin ? <NavbarAdmin /> : <Navbar />}\n          <center>Loading Web3, accounts, and contract...</center>\n        </>\n      );\n    }\n    if (!this.state.isAdmin) {\n      return (\n        <>\n          <Navbar />\n          <AdminOnly page=\"Verification Page.\" />\n        </>\n      );\n    }\n    return (\n      <>\n        <NavbarAdmin />\n        <div className=\"container-main\">\n          <h3>Verification</h3>\n          <small>Total Voters: {this.state.voters.length}</small>\n          {this.state.voters.length < 1 ? (\n            <div className=\"container-item info\">None has registered yet.</div>\n          ) : (\n            <>\n              <div className=\"container-item info\">\n                <center>List of registered voters</center>\n              </div>\n              {this.state.voters.map(this.renderUnverifiedVoters)}\n            </>\n          )}\n        </div>\n      </>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}