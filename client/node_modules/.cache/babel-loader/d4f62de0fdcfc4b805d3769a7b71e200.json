{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anand\\\\OneDrive\\\\Desktop\\\\dVoting-master\\\\client\\\\src\\\\component\\\\Admin\\\\AddCandidate\\\\AddCandidate.js\";\nimport React, { Component } from \"react\";\nimport Navbar from \"../../Navbar/Navigation\";\nimport NavbarAdmin from \"../../Navbar/NavigationAdmin\";\nimport getWeb3 from \"../../../getWeb3\";\nimport Election from \"../../../contracts/Election.json\";\nimport AdminOnly from \"../../AdminOnly\";\nimport \"./AddCandidate.css\";\nexport default class AddCandidate extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = async () => {\n      // refreshing page only once\n      if (!window.location.hash) {\n        window.location = window.location + \"#loaded\";\n        window.location.reload();\n      }\n\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = Election.networks[networkId];\n        const instance = new web3.eth.Contract(Election.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3: web3,\n          ElectionInstance: instance,\n          account: accounts[0]\n        }); // Total number of candidates\n\n        const candidateCount = await this.state.ElectionInstance.methods.getTotalCandidate().call();\n        this.setState({\n          candidateCount: candidateCount\n        });\n        const admin = await this.state.ElectionInstance.methods.getAdmin().call();\n\n        if (this.state.account === admin) {\n          this.setState({\n            isAdmin: true\n          });\n        } // Loading Candidates details\n\n\n        for (let i = 0; i < this.state.candidateCount; i++) {\n          const candidate = await this.state.ElectionInstance.methods.candidateDetails(i).call();\n          this.state.candidates.push({\n            id: candidate.candidateId,\n            header: candidate.header,\n            slogan: candidate.slogan\n          });\n        }\n\n        this.setState({\n          candidates: this.state.candidates\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        console.error(error);\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n      }\n    };\n\n    this.updateHeader = event => {\n      this.setState({\n        header: event.target.value\n      });\n    };\n\n    this.updateSlogan = event => {\n      this.setState({\n        slogan: event.target.value\n      });\n    };\n\n    this.addCandidate = async () => {\n      await this.state.ElectionInstance.methods.addCandidate(this.state.header, this.state.slogan).send({\n        from: this.state.account,\n        gas: 1000000\n      });\n      window.location.reload();\n    };\n\n    this.state = {\n      ElectionInstance: undefined,\n      web3: null,\n      accounts: null,\n      isAdmin: false,\n      header: \"\",\n      slogan: \"\",\n      candidates: [],\n      candidateCount: undefined\n    };\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, this.state.isAdmin ? /*#__PURE__*/React.createElement(NavbarAdmin, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 33\n        }\n      }) : /*#__PURE__*/React.createElement(Navbar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 51\n        }\n      }), /*#__PURE__*/React.createElement(\"center\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }\n      }, \"Loading Web3, accounts, and contract...\"));\n    }\n\n    if (!this.state.isAdmin) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Navbar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(AdminOnly, {\n        page: \"Add Candidate Page.\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(NavbarAdmin, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }\n    }, \"Add a new candidate\"), /*#__PURE__*/React.createElement(\"small\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }\n    }, \"Total candidates: \", this.state.candidateCount), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      className: \"form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"label-ac\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 15\n      }\n    }, \"Header\", /*#__PURE__*/React.createElement(\"input\", {\n      className: \"input-ac\",\n      type: \"text\",\n      placeholder: \"eg. Marcus\",\n      value: this.state.header,\n      onChange: this.updateHeader,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"label\", {\n      className: \"label-ac\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 15\n      }\n    }, \"Slogan\", /*#__PURE__*/React.createElement(\"input\", {\n      className: \"input-ac\",\n      type: \"text\",\n      placeholder: \"eg. It is what it is\",\n      value: this.state.slogan,\n      onChange: this.updateSlogan,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn-add\",\n      disabled: this.state.header.length < 3 || this.state.header.length > 21,\n      onClick: this.addCandidate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 15\n      }\n    }, \"Add\")))), loadAdded(this.state.candidates));\n  }\n\n}\nexport function loadAdded(candidates) {\n  const renderAdded = candidate => {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-list success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        maxHeight: \"21px\",\n        overflow: \"auto\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }\n    }, candidate.id, \". \", /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 29\n      }\n    }, candidate.header), \":\", \" \", candidate.slogan)));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container-main\",\n    style: {\n      borderTop: \"1px solid\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container-item info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"center\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 9\n    }\n  }, \"Candidates List\")), candidates.length < 1 ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container-item alert\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"center\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 11\n    }\n  }, \"No candidates added.\")) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container-item\",\n    style: {\n      display: \"block\",\n      backgroundColor: \"#DDFFFF\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }\n  }, candidates.map(renderAdded)));\n}","map":{"version":3,"sources":["C:/Users/anand/OneDrive/Desktop/dVoting-master/client/src/component/Admin/AddCandidate/AddCandidate.js"],"names":["React","Component","Navbar","NavbarAdmin","getWeb3","Election","AdminOnly","AddCandidate","constructor","props","componentDidMount","window","location","hash","reload","web3","accounts","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","setState","ElectionInstance","account","candidateCount","state","methods","getTotalCandidate","call","admin","getAdmin","isAdmin","i","candidate","candidateDetails","candidates","push","id","candidateId","header","slogan","error","console","alert","updateHeader","event","target","value","updateSlogan","addCandidate","send","from","gas","undefined","render","length","loadAdded","renderAdded","maxHeight","overflow","borderTop","display","backgroundColor","map"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport Navbar from \"../../Navbar/Navigation\";\nimport NavbarAdmin from \"../../Navbar/NavigationAdmin\";\n\nimport getWeb3 from \"../../../getWeb3\";\nimport Election from \"../../../contracts/Election.json\";\n\nimport AdminOnly from \"../../AdminOnly\";\n\nimport \"./AddCandidate.css\";\n\nexport default class AddCandidate extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ElectionInstance: undefined,\n      web3: null,\n      accounts: null,\n      isAdmin: false,\n      header: \"\",\n      slogan: \"\",\n      candidates: [],\n      candidateCount: undefined,\n    };\n  }\n\n  componentDidMount = async () => {\n    // refreshing page only once\n    if (!window.location.hash) {\n      window.location = window.location + \"#loaded\";\n      window.location.reload();\n    }\n\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = Election.networks[networkId];\n      const instance = new web3.eth.Contract(\n        Election.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({\n        web3: web3,\n        ElectionInstance: instance,\n        account: accounts[0],\n      });\n\n      // Total number of candidates\n      const candidateCount = await this.state.ElectionInstance.methods\n        .getTotalCandidate()\n        .call();\n      this.setState({ candidateCount: candidateCount });\n\n      const admin = await this.state.ElectionInstance.methods.getAdmin().call();\n      if (this.state.account === admin) {\n        this.setState({ isAdmin: true });\n      }\n\n      // Loading Candidates details\n      for (let i = 0; i < this.state.candidateCount; i++) {\n        const candidate = await this.state.ElectionInstance.methods\n          .candidateDetails(i)\n          .call();\n        this.state.candidates.push({\n          id: candidate.candidateId,\n          header: candidate.header,\n          slogan: candidate.slogan,\n        });\n      }\n\n      this.setState({ candidates: this.state.candidates });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      console.error(error);\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n    }\n  };\n  updateHeader = (event) => {\n    this.setState({ header: event.target.value });\n  };\n  updateSlogan = (event) => {\n    this.setState({ slogan: event.target.value });\n  };\n\n  addCandidate = async () => {\n    await this.state.ElectionInstance.methods\n      .addCandidate(this.state.header, this.state.slogan)\n      .send({ from: this.state.account, gas: 1000000 });\n    window.location.reload();\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return (\n        <>\n          {this.state.isAdmin ? <NavbarAdmin /> : <Navbar />}\n          <center>Loading Web3, accounts, and contract...</center>\n        </>\n      );\n    }\n    if (!this.state.isAdmin) {\n      return (\n        <>\n          <Navbar />\n          <AdminOnly page=\"Add Candidate Page.\" />\n        </>\n      );\n    }\n    return (\n      <>\n        <NavbarAdmin />\n        <div className=\"container-main\">\n          <h2>Add a new candidate</h2>\n          <small>Total candidates: {this.state.candidateCount}</small>\n          <div className=\"container-item\">\n            <form className=\"form\">\n              <label className={\"label-ac\"}>\n                Header\n                <input\n                  className={\"input-ac\"}\n                  type=\"text\"\n                  placeholder=\"eg. Marcus\"\n                  value={this.state.header}\n                  onChange={this.updateHeader}\n                />\n              </label>\n              <label className={\"label-ac\"}>\n                Slogan\n                <input\n                  className={\"input-ac\"}\n                  type=\"text\"\n                  placeholder=\"eg. It is what it is\"\n                  value={this.state.slogan}\n                  onChange={this.updateSlogan}\n                />\n              </label>\n              <button\n                className=\"btn-add\"\n                disabled={\n                  this.state.header.length < 3 || this.state.header.length > 21\n                }\n                onClick={this.addCandidate}\n              >\n                Add\n              </button>\n            </form>\n          </div>\n        </div>\n        {loadAdded(this.state.candidates)}\n      </>\n    );\n  }\n}\nexport function loadAdded(candidates) {\n  const renderAdded = (candidate) => {\n    return (\n      <>\n        <div className=\"container-list success\">\n          <div\n            style={{\n              maxHeight: \"21px\",\n              overflow: \"auto\",\n            }}\n          >\n            {candidate.id}. <strong>{candidate.header}</strong>:{\" \"}\n            {candidate.slogan}\n          </div>\n        </div>\n      </>\n    );\n  };\n  return (\n    <div className=\"container-main\" style={{ borderTop: \"1px solid\" }}>\n      <div className=\"container-item info\">\n        <center>Candidates List</center>\n      </div>\n      {candidates.length < 1 ? (\n        <div className=\"container-item alert\">\n          <center>No candidates added.</center>\n        </div>\n      ) : (\n        <div\n          className=\"container-item\"\n          style={{\n            display: \"block\",\n            backgroundColor: \"#DDFFFF\",\n          }}\n        >\n          {candidates.map(renderAdded)}\n        </div>\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}