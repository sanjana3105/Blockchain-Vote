{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anand\\\\OneDrive\\\\Desktop\\\\Important Files and Documents\\\\Mini Project\\\\dVoting-master\\\\client\\\\src\\\\component\\\\Registration\\\\Registration.js\";\n// Node modules\nimport React, { Component } from \"react\"; // Components\n\nimport Navbar from \"../Navbar/Navigation\";\nimport NavbarAdmin from \"../Navbar/NavigationAdmin\";\nimport NotInit from \"../NotInit\"; // CSS\n\nimport \"./Registration.css\"; // Contract\n\nimport getWeb3 from \"../../getWeb3\";\nimport Election from \"../../contracts/Election.json\";\nexport default class Registration extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = async () => {\n      if (!window.location.hash) {\n        window.location = window.location + \"#loaded\";\n        window.location.reload();\n      }\n\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = Election.networks[networkId];\n        const instance = new web3.eth.Contract(Election.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3: web3,\n          ElectionInstance: instance,\n          account: accounts[0]\n        }); // Admin account and verification\n\n        const admin = await this.state.ElectionInstance.methods.getAdmin().call();\n\n        if (this.state.account === admin) {\n          this.setState({\n            isAdmin: true\n          });\n        } // Get start and end values\n\n\n        const start = await this.state.ElectionInstance.methods.getStart().call();\n        this.setState({\n          isElStarted: start\n        });\n        const end = await this.state.ElectionInstance.methods.getEnd().call();\n        this.setState({\n          isElEnded: end\n        }); // Total number of voters\n\n        const voterCount = await this.state.ElectionInstance.methods.getTotalVoter().call();\n        this.setState({\n          voterCount: voterCount\n        }); // Loading all the voters\n\n        for (let i = 0; i < this.state.voterCount; i++) {\n          const voterAddress = await this.state.ElectionInstance.methods.voters(i).call();\n          const voter = await this.state.ElectionInstance.methods.voterDetails(voterAddress).call();\n          this.state.voters.push({\n            address: voter.voterAddress,\n            name: voter.name,\n            phone: voter.phone,\n            hasVoted: voter.hasVoted,\n            isVerified: voter.isVerified,\n            isRegistered: voter.isRegistered\n          });\n        }\n\n        this.setState({\n          voters: this.state.voters\n        }); // Loading current voters\n\n        const voter = await this.state.ElectionInstance.methods.voterDetails(this.state.account).call();\n        this.setState({\n          currentVoter: {\n            address: voter.voterAddress,\n            name: voter.name,\n            phone: voter.phone,\n            hasVoted: voter.hasVoted,\n            isVerified: voter.isVerified,\n            isRegistered: voter.isRegistered\n          }\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        console.error(error);\n        alert(`Failed to load web3, accounts, or contract. Check console for details (f12).`);\n      }\n    };\n\n    this.updateVoterName = event => {\n      this.setState({\n        voterName: event.target.value\n      });\n    };\n\n    this.updateVoterPhone = event => {\n      this.setState({\n        voterPhone: event.target.value\n      });\n    };\n\n    this.registerAsVoter = async () => {\n      await this.state.ElectionInstance.methods.registerAsVoter(this.state.voterName, this.state.voterPhone).send({\n        from: this.state.account,\n        gas: 1000000\n      });\n      window.location.reload();\n    };\n\n    this.state = {\n      ElectionInstance: undefined,\n      web3: null,\n      account: null,\n      isAdmin: false,\n      isElStarted: false,\n      isElEnded: false,\n      voterCount: undefined,\n      voterName: \"\",\n      voterPhone: \"\",\n      voters: [],\n      currentVoter: {\n        address: undefined,\n        name: null,\n        phone: null,\n        hasVoted: false,\n        isVerified: false,\n        isRegistered: false\n      }\n    };\n  } // refreshing once\n\n\n  render() {\n    if (!this.state.web3) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, this.state.isAdmin ? /*#__PURE__*/React.createElement(NavbarAdmin, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 33\n        }\n      }) : /*#__PURE__*/React.createElement(Navbar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 51\n        }\n      }), /*#__PURE__*/React.createElement(\"center\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }\n      }, \"Loading Web3, accounts, and contract...\"));\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, this.state.isAdmin ? /*#__PURE__*/React.createElement(NavbarAdmin, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 31\n      }\n    }) : /*#__PURE__*/React.createElement(Navbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 49\n      }\n    }), !this.state.isElStarted && !this.state.isElEnded ? /*#__PURE__*/React.createElement(NotInit, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }\n    }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-item info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 15\n      }\n    }, \"Total registered voters: \", this.state.voters.length)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 15\n      }\n    }, \"Registration\"), /*#__PURE__*/React.createElement(\"small\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 15\n      }\n    }, \"Register to vote.\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"div-li\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"label-r\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 21\n      }\n    }, \"Account Address\", /*#__PURE__*/React.createElement(\"input\", {\n      className: \"input-r\",\n      type: \"text\",\n      value: this.state.account,\n      style: {\n        width: \"400px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 23\n      }\n    }), \" \")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"div-li\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"label-r\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 21\n      }\n    }, \"Name\", /*#__PURE__*/React.createElement(\"input\", {\n      className: \"input-r\",\n      type: \"text\",\n      placeholder: \"eg. Ava\",\n      value: this.state.voterName,\n      onChange: this.updateVoterName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 23\n      }\n    }), \" \")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"div-li\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"label-r\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 21\n      }\n    }, \"Phone number \", /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: \"tomato\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 36\n      }\n    }, \"*\"), /*#__PURE__*/React.createElement(\"input\", {\n      className: \"input-r\",\n      type: \"number\",\n      placeholder: \"eg. 9841234567\",\n      value: this.state.voterPhone,\n      onChange: this.updateVoterPhone,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 23\n      }\n    }))), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: \"tomato\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 21\n      }\n    }, \" Note: \"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 21\n      }\n    }), \" Make sure your account address and Phone number are correct. \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 30\n      }\n    }), \" Admin might not approve your account if the provided Phone number nub does not matches the account address registered in admins catalogue.\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn-add\",\n      disabled: this.state.voterPhone.length !== 10 || this.state.currentVoter.isVerified,\n      onClick: this.registerAsVoter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 19\n      }\n    }, this.state.currentVoter.isRegistered ? \"Update\" : \"Register\")))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-main\",\n      style: {\n        borderTop: this.state.currentVoter.isRegistered ? null : \"1px solid\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 13\n      }\n    }, loadCurrentVoter(this.state.currentVoter, this.state.currentVoter.isRegistered)), this.state.isAdmin ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-main\",\n      style: {\n        borderTop: \"1px solid\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"small\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 17\n      }\n    }, \"TotalVoters: \", this.state.voters.length), loadAllVoters(this.state.voters)) : null));\n  }\n\n}\nexport function loadCurrentVoter(voter, isRegistered) {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container-item \" + (isRegistered ? \"success\" : \"attention\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"center\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 9\n    }\n  }, \"Your Registered Info\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container-list \" + (isRegistered ? \"success\" : \"attention\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 13\n    }\n  }, \"Account Address\"), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 13\n    }\n  }, voter.address)), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 13\n    }\n  }, \"Name\"), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 13\n    }\n  }, voter.name)), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 13\n    }\n  }, \"Phone\"), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 13\n    }\n  }, voter.phone)), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 13\n    }\n  }, \"Voted\"), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 13\n    }\n  }, voter.hasVoted ? \"True\" : \"False\")), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 13\n    }\n  }, \"Verification\"), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 13\n    }\n  }, voter.isVerified ? \"True\" : \"False\")), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 13\n    }\n  }, \"Registered\"), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 13\n    }\n  }, voter.isRegistered ? \"True\" : \"False\")))));\n}\nexport function loadAllVoters(voters) {\n  const renderAllVoters = voter => {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-list success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"table\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 15\n      }\n    }, \"Account address\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 15\n      }\n    }, voter.address)), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 15\n      }\n    }, \"Name\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 15\n      }\n    }, voter.name)), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 15\n      }\n    }, \"Phone\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 15\n      }\n    }, voter.phone)), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 15\n      }\n    }, \"Voted\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 15\n      }\n    }, voter.hasVoted ? \"True\" : \"False\")), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 15\n      }\n    }, \"Verified\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 15\n      }\n    }, voter.isVerified ? \"True\" : \"False\")), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 15\n      }\n    }, \"Registered\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 15\n      }\n    }, voter.isRegistered ? \"True\" : \"False\")))));\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container-item success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"center\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 9\n    }\n  }, \"List of voters\")), voters.map(renderAllVoters));\n}","map":{"version":3,"sources":["C:/Users/anand/OneDrive/Desktop/Important Files and Documents/Mini Project/dVoting-master/client/src/component/Registration/Registration.js"],"names":["React","Component","Navbar","NavbarAdmin","NotInit","getWeb3","Election","Registration","constructor","props","componentDidMount","window","location","hash","reload","web3","accounts","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","setState","ElectionInstance","account","admin","state","methods","getAdmin","call","isAdmin","start","getStart","isElStarted","end","getEnd","isElEnded","voterCount","getTotalVoter","i","voterAddress","voters","voter","voterDetails","push","name","phone","hasVoted","isVerified","isRegistered","currentVoter","error","console","alert","updateVoterName","event","voterName","target","value","updateVoterPhone","voterPhone","registerAsVoter","send","from","gas","undefined","render","length","width","color","borderTop","loadCurrentVoter","loadAllVoters","renderAllVoters","map"],"mappings":"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","sourcesContent":["// Node modules\nimport React, { Component } from \"react\";\n\n// Components\nimport Navbar from \"../Navbar/Navigation\";\nimport NavbarAdmin from \"../Navbar/NavigationAdmin\";\nimport NotInit from \"../NotInit\";\n\n// CSS\nimport \"./Registration.css\";\n\n// Contract\nimport getWeb3 from \"../../getWeb3\";\nimport Election from \"../../contracts/Election.json\";\n\nexport default class Registration extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ElectionInstance: undefined,\n      web3: null,\n      account: null,\n      isAdmin: false,\n      isElStarted: false,\n      isElEnded: false,\n      voterCount: undefined,\n      voterName: \"\",\n      voterPhone: \"\",\n      voters: [],\n      currentVoter: {\n        address: undefined,\n        name: null,\n        phone: null,\n        hasVoted: false,\n        isVerified: false,\n        isRegistered: false,\n      },\n    };\n  }\n\n  // refreshing once\n  componentDidMount = async () => {\n    if (!window.location.hash) {\n      window.location = window.location + \"#loaded\";\n      window.location.reload();\n    }\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = Election.networks[networkId];\n      const instance = new web3.eth.Contract(\n        Election.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({\n        web3: web3,\n        ElectionInstance: instance,\n        account: accounts[0],\n      });\n\n      // Admin account and verification\n      const admin = await this.state.ElectionInstance.methods.getAdmin().call();\n      if (this.state.account === admin) {\n        this.setState({ isAdmin: true });\n      }\n\n      // Get start and end values\n      const start = await this.state.ElectionInstance.methods.getStart().call();\n      this.setState({ isElStarted: start });\n      const end = await this.state.ElectionInstance.methods.getEnd().call();\n      this.setState({ isElEnded: end });\n\n      // Total number of voters\n      const voterCount = await this.state.ElectionInstance.methods\n        .getTotalVoter()\n        .call();\n      this.setState({ voterCount: voterCount });\n\n      // Loading all the voters\n      for (let i = 0; i < this.state.voterCount; i++) {\n        const voterAddress = await this.state.ElectionInstance.methods\n          .voters(i)\n          .call();\n        const voter = await this.state.ElectionInstance.methods\n          .voterDetails(voterAddress)\n          .call();\n        this.state.voters.push({\n          address: voter.voterAddress,\n          name: voter.name,\n          phone: voter.phone,\n          hasVoted: voter.hasVoted,\n          isVerified: voter.isVerified,\n          isRegistered: voter.isRegistered,\n        });\n      }\n      this.setState({ voters: this.state.voters });\n\n      // Loading current voters\n      const voter = await this.state.ElectionInstance.methods\n        .voterDetails(this.state.account)\n        .call();\n      this.setState({\n        currentVoter: {\n          address: voter.voterAddress,\n          name: voter.name,\n          phone: voter.phone,\n          hasVoted: voter.hasVoted,\n          isVerified: voter.isVerified,\n          isRegistered: voter.isRegistered,\n        },\n      });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      console.error(error);\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details (f12).`\n      );\n    }\n  };\n  updateVoterName = (event) => {\n    this.setState({ voterName: event.target.value });\n  };\n  updateVoterPhone = (event) => {\n    this.setState({ voterPhone: event.target.value });\n  };\n  registerAsVoter = async () => {\n    await this.state.ElectionInstance.methods\n      .registerAsVoter(this.state.voterName, this.state.voterPhone)\n      .send({ from: this.state.account, gas: 1000000 });\n    window.location.reload();\n  };\n  render() {\n    if (!this.state.web3) {\n      return (\n        <>\n          {this.state.isAdmin ? <NavbarAdmin /> : <Navbar />}\n          <center>Loading Web3, accounts, and contract...</center>\n        </>\n      );\n    }\n    return (\n      <>\n        {this.state.isAdmin ? <NavbarAdmin /> : <Navbar />}\n        {!this.state.isElStarted && !this.state.isElEnded ? (\n          <NotInit />\n        ) : (\n          <>\n            <div className=\"container-item info\">\n              <p>Total registered voters: {this.state.voters.length}</p>\n            </div>\n            <div className=\"container-main\">\n              <h3>Registration</h3>\n              <small>Register to vote.</small>\n              <div className=\"container-item\">\n                <form>\n                  <div className=\"div-li\">\n                    <label className={\"label-r\"}>\n                      Account Address\n                      <input\n                        className={\"input-r\"}\n                        type=\"text\"\n                        value={this.state.account}\n                        style={{ width: \"400px\" }}\n                      />{\" \"}\n                    </label>\n                  </div>\n                  <div className=\"div-li\">\n                    <label className={\"label-r\"}>\n                      Name\n                      <input\n                        className={\"input-r\"}\n                        type=\"text\"\n                        placeholder=\"eg. Ava\"\n                        value={this.state.voterName}\n                        onChange={this.updateVoterName}\n                      />{\" \"}\n                    </label>\n                  </div>\n                  <div className=\"div-li\">\n                    <label className={\"label-r\"}>\n                      Phone number <span style={{ color: \"tomato\" }}>*</span>\n                      <input\n                        className={\"input-r\"}\n                        type=\"number\"\n                        placeholder=\"eg. 9841234567\"\n                        value={this.state.voterPhone}\n                        onChange={this.updateVoterPhone}\n                      />\n                    </label>\n                  </div>\n                  <p className=\"note\">\n                    <span style={{ color: \"tomato\" }}> Note: </span>\n                    <br /> Make sure your account address and Phone number are\n                    correct. <br /> Admin might not approve your account if the\n                    provided Phone number nub does not matches the account\n                    address registered in admins catalogue.\n                  </p>\n                  <button\n                    className=\"btn-add\"\n                    disabled={\n                      this.state.voterPhone.length !== 10 ||\n                      this.state.currentVoter.isVerified\n                    }\n                    onClick={this.registerAsVoter}\n                  >\n                    {this.state.currentVoter.isRegistered\n                      ? \"Update\"\n                      : \"Register\"}\n                  </button>\n                </form>\n              </div>\n            </div>\n            <div\n              className=\"container-main\"\n              style={{\n                borderTop: this.state.currentVoter.isRegistered\n                  ? null\n                  : \"1px solid\",\n              }}\n            >\n              {loadCurrentVoter(\n                this.state.currentVoter,\n                this.state.currentVoter.isRegistered\n              )}\n            </div>\n            {this.state.isAdmin ? (\n              <div\n                className=\"container-main\"\n                style={{ borderTop: \"1px solid\" }}\n              >\n                <small>TotalVoters: {this.state.voters.length}</small>\n                {loadAllVoters(this.state.voters)}\n              </div>\n            ) : null}\n          </>\n        )}\n      </>\n    );\n  }\n}\nexport function loadCurrentVoter(voter, isRegistered) {\n  return (\n    <>\n      <div\n        className={\"container-item \" + (isRegistered ? \"success\" : \"attention\")}\n      >\n        <center>Your Registered Info</center>\n      </div>\n      <div\n        className={\"container-list \" + (isRegistered ? \"success\" : \"attention\")}\n      >\n        <table>\n          <tr>\n            <th>Account Address</th>\n            <td>{voter.address}</td>\n          </tr>\n          <tr>\n            <th>Name</th>\n            <td>{voter.name}</td>\n          </tr>\n          <tr>\n            <th>Phone</th>\n            <td>{voter.phone}</td>\n          </tr>\n          <tr>\n            <th>Voted</th>\n            <td>{voter.hasVoted ? \"True\" : \"False\"}</td>\n          </tr>\n          <tr>\n            <th>Verification</th>\n            <td>{voter.isVerified ? \"True\" : \"False\"}</td>\n          </tr>\n          <tr>\n            <th>Registered</th>\n            <td>{voter.isRegistered ? \"True\" : \"False\"}</td>\n          </tr>\n        </table>\n      </div>\n    </>\n  );\n}\nexport function loadAllVoters(voters) {\n  const renderAllVoters = (voter) => {\n    return (\n      <>\n        <div className=\"container-list success\">\n          <table>\n            <tr>\n              <th>Account address</th>\n              <td>{voter.address}</td>\n            </tr>\n            <tr>\n              <th>Name</th>\n              <td>{voter.name}</td>\n            </tr>\n            <tr>\n              <th>Phone</th>\n              <td>{voter.phone}</td>\n            </tr>\n            <tr>\n              <th>Voted</th>\n              <td>{voter.hasVoted ? \"True\" : \"False\"}</td>\n            </tr>\n            <tr>\n              <th>Verified</th>\n              <td>{voter.isVerified ? \"True\" : \"False\"}</td>\n            </tr>\n            <tr>\n              <th>Registered</th>\n              <td>{voter.isRegistered ? \"True\" : \"False\"}</td>\n            </tr>\n          </table>\n        </div>\n      </>\n    );\n  };\n  return (\n    <>\n      <div className=\"container-item success\">\n        <center>List of voters</center>\n      </div>\n      {voters.map(renderAllVoters)}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}