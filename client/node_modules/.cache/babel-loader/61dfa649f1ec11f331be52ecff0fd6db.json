{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anand\\\\OneDrive\\\\Desktop\\\\Important Files and Documents\\\\Mini Project\\\\dVoting-master\\\\client\\\\src\\\\component\\\\Home.js\";\n// Node modules\nimport React, { Component } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { Link } from \"react-router-dom\"; // Components\n\nimport Navbar from \"./Navbar/Navigation\";\nimport NavbarAdmin from \"./Navbar/NavigationAdmin\";\nimport UserHome from \"./UserHome\";\nimport StartEnd from \"./StartEnd\";\nimport ElectionStatus from \"./ElectionStatus\"; // Contract\n\nimport getWeb3 from \"../getWeb3\";\nimport Election from \"../contracts/Election.json\"; // CSS\n\nimport \"./Home.css\"; // const buttonRef = React.createRef();\n\nexport default class Home extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.componentDidMount = async () => {\n      if (!window.location.hash) {\n        window.location = window.location + \"#loaded\";\n        window.location.reload();\n      }\n\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = Election.networks[networkId];\n        const instance = new web3.eth.Contract(Election.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3: web3,\n          ElectionInstance: instance,\n          account: accounts[0]\n        });\n        const admin = await this.state.ElectionInstance.methods.getAdmin().call();\n\n        if (this.state.account === admin) {\n          this.setState({\n            isAdmin: true\n          });\n        } // Get election start and end values\n\n\n        const start = await this.state.ElectionInstance.methods.getStart().call();\n        this.setState({\n          elStarted: start\n        });\n        const end = await this.state.ElectionInstance.methods.getEnd().call();\n        this.setState({\n          elEnded: end\n        }); // Getting election details from the contract\n\n        const adminName = await this.state.ElectionInstance.methods.getAdminName().call();\n        const adminEmail = await this.state.ElectionInstance.methods.getAdminEmail().call();\n        const adminTitle = await this.state.ElectionInstance.methods.getAdminTitle().call();\n        const electionTitle = await this.state.ElectionInstance.methods.getElectionTitle().call();\n        const organizationTitle = await this.state.ElectionInstance.methods.getOrganizationTitle().call();\n        this.setState({\n          elDetails: {\n            adminName: adminName,\n            adminEmail: adminEmail,\n            adminTitle: adminTitle,\n            electionTitle: electionTitle,\n            organizationTitle: organizationTitle\n          }\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    };\n\n    this.endElection = async () => {\n      await this.state.ElectionInstance.methods.endElection().send({\n        from: this.state.account,\n        gas: 1000000\n      });\n      window.location.reload();\n    };\n\n    this.registerElection = async data => {\n      await this.state.ElectionInstance.methods.setElectionDetails(data.adminFName.toLowerCase() + \" \" + data.adminLName.toLowerCase(), data.adminEmail.toLowerCase(), data.adminTitle.toLowerCase(), data.electionTitle.toLowerCase(), data.organizationTitle.toLowerCase()).send({\n        from: this.state.account,\n        gas: 1000000\n      });\n      window.location.reload();\n    };\n\n    this.renderAdminHome = () => {\n      var _s = $RefreshSig$();\n\n      const EMsg = props => {\n        return /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"tomato\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 14\n          }\n        }, props.msg);\n      };\n\n      const AdminHome = () => {\n        _s();\n\n        // Contains of Home page for the Admin\n        const {\n          handleSubmit,\n          register,\n          formState: {\n            errors\n          }\n        } = useForm();\n\n        const onSubmit = data => {\n          this.registerElection(data);\n        };\n\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"form\", {\n          onSubmit: handleSubmit(onSubmit),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 11\n          }\n        }, !this.state.elStarted & !this.state.elEnded ? /*#__PURE__*/React.createElement(\"div\", {\n          className: \"container-main\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"about-admin\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"h3\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 19\n          }\n        }, \"About Admin\"), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"container-item center-items\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 19\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"label\", {\n          className: \"label-home\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 23\n          }\n        }, \"Full Name\", \" \", errors.adminFName && /*#__PURE__*/React.createElement(EMsg, {\n          msg: \"*required\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 47\n          }\n        }), /*#__PURE__*/React.createElement(\"input\", Object.assign({\n          className: \"input-home\",\n          type: \"text\",\n          placeholder: \"First Name\"\n        }, register(\"adminFName\", {\n          required: true\n        }), {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 25\n          }\n        })), /*#__PURE__*/React.createElement(\"input\", Object.assign({\n          className: \"input-home\",\n          type: \"text\",\n          placeholder: \"Last Name\"\n        }, register(\"adminLName\"), {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 25\n          }\n        }))), /*#__PURE__*/React.createElement(\"label\", {\n          className: \"label-home\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 23\n          }\n        }, \"Email\", \" \", errors.adminEmail && /*#__PURE__*/React.createElement(EMsg, {\n          msg: errors.adminEmail.message,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 27\n          }\n        }), /*#__PURE__*/React.createElement(\"input\", Object.assign({\n          className: \"input-home\",\n          placeholder: \"eg. you@example.com\",\n          name: \"adminEmail\"\n        }, register(\"adminEmail\", {\n          required: \"*Required\",\n          pattern: {\n            value: /^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$/,\n            // email validation using RegExp\n            message: \"*Invalid\"\n          }\n        }), {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 25\n          }\n        }))), /*#__PURE__*/React.createElement(\"label\", {\n          className: \"label-home\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 23\n          }\n        }, \"Job Title or Position\", \" \", errors.adminTitle && /*#__PURE__*/React.createElement(EMsg, {\n          msg: \"*required\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 47\n          }\n        }), /*#__PURE__*/React.createElement(\"input\", Object.assign({\n          className: \"input-home\",\n          type: \"text\",\n          placeholder: \"eg. HR Head \"\n        }, register(\"adminTitle\", {\n          required: true\n        }), {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 25\n          }\n        })))))), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"about-election\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"h3\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 19\n          }\n        }, \"About Election\"), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"container-item center-items\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 19\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"label\", {\n          className: \"label-home\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 23\n          }\n        }, \"Election Title\", \" \", errors.electionTitle && /*#__PURE__*/React.createElement(EMsg, {\n          msg: \"*required\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 50\n          }\n        }), /*#__PURE__*/React.createElement(\"input\", Object.assign({\n          className: \"input-home\",\n          type: \"text\",\n          placeholder: \"eg. School Election\"\n        }, register(\"electionTitle\", {\n          required: true\n        }), {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 25\n          }\n        }))), /*#__PURE__*/React.createElement(\"label\", {\n          className: \"label-home\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 23\n          }\n        }, \"Organization Name\", \" \", errors.organizationName && /*#__PURE__*/React.createElement(EMsg, {\n          msg: \"*required\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 53\n          }\n        }), /*#__PURE__*/React.createElement(\"input\", Object.assign({\n          className: \"input-home\",\n          type: \"text\",\n          placeholder: \"eg. Lifeline Academy\"\n        }, register(\"organizationTitle\", {\n          required: true\n        }), {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 25\n          }\n        }))))))) : this.state.elStarted ? /*#__PURE__*/React.createElement(UserHome, {\n          el: this.state.elDetails,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 15\n          }\n        }) : null, /*#__PURE__*/React.createElement(StartEnd, {\n          elStarted: this.state.elStarted,\n          elEnded: this.state.elEnded,\n          endElFn: this.endElection,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 13\n          }\n        }), /*#__PURE__*/React.createElement(ElectionStatus, {\n          elStarted: this.state.elStarted,\n          elEnded: this.state.elEnded,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 13\n          }\n        })));\n      };\n\n      _s(AdminHome, \"SfCCXstsfNxrEp6SMgPKgi3TmgA=\", false, function () {\n        return [useForm];\n      });\n\n      return /*#__PURE__*/React.createElement(AdminHome, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 12\n        }\n      });\n    };\n\n    this.state = {\n      ElectionInstance: undefined,\n      account: null,\n      web3: null,\n      isAdmin: false,\n      elStarted: false,\n      elEnded: false,\n      elDetails: {}\n    };\n  } // refreshing once\n\n\n  render() {\n    if (!this.state.web3) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Navbar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"center\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }\n      }, \"Loading Web3, accounts, and contract...\"));\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, this.state.isAdmin ? /*#__PURE__*/React.createElement(NavbarAdmin, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 31\n      }\n    }) : /*#__PURE__*/React.createElement(Navbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-item center-items info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }\n    }, \"Your Account: \", this.state.account), !this.state.elStarted & !this.state.elEnded ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-item info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"center\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }\n    }, \"The election has not been initialize.\"), this.state.isAdmin ? /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 19\n      }\n    }, \"Set up the election.\") : /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 19\n      }\n    }, \"Please wait..\"))) : null), this.state.isAdmin ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(this.renderAdminHome, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 13\n      }\n    })) : this.state.elStarted ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(UserHome, {\n      el: this.state.elDetails,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 13\n      }\n    })) : !this.state.isElStarted && this.state.isElEnded ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-item attention\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"center\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }\n    }, \"The Election ended.\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Link, {\n      to: \"/Results\",\n      style: {\n        color: \"black\",\n        textDecoration: \"underline\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }\n    }, \"See results\")))) : null);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/anand/OneDrive/Desktop/Important Files and Documents/Mini Project/dVoting-master/client/src/component/Home.js"],"names":["React","Component","useForm","Link","Navbar","NavbarAdmin","UserHome","StartEnd","ElectionStatus","getWeb3","Election","Home","constructor","props","componentDidMount","window","location","hash","reload","web3","accounts","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","setState","ElectionInstance","account","admin","state","methods","getAdmin","call","isAdmin","start","getStart","elStarted","end","getEnd","elEnded","adminName","getAdminName","adminEmail","getAdminEmail","adminTitle","getAdminTitle","electionTitle","getElectionTitle","organizationTitle","getOrganizationTitle","elDetails","error","alert","console","endElection","send","from","gas","registerElection","data","setElectionDetails","adminFName","toLowerCase","adminLName","renderAdminHome","EMsg","color","msg","AdminHome","handleSubmit","register","formState","errors","onSubmit","required","message","pattern","value","organizationName","undefined","render","isElStarted","isElEnded","textDecoration"],"mappings":"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","sourcesContent":["// Node modules\nimport React, { Component } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { Link } from \"react-router-dom\";\n\n// Components\nimport Navbar from \"./Navbar/Navigation\";\nimport NavbarAdmin from \"./Navbar/NavigationAdmin\";\nimport UserHome from \"./UserHome\";\nimport StartEnd from \"./StartEnd\";\nimport ElectionStatus from \"./ElectionStatus\";\n\n// Contract\nimport getWeb3 from \"../getWeb3\";\nimport Election from \"../contracts/Election.json\";\n\n// CSS\nimport \"./Home.css\";\n\n// const buttonRef = React.createRef();\nexport default class Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ElectionInstance: undefined,\n      account: null,\n      web3: null,\n      isAdmin: false,\n      elStarted: false,\n      elEnded: false,\n      elDetails: {},\n    };\n  }\n\n  // refreshing once\n  componentDidMount = async () => {\n    if (!window.location.hash) {\n      window.location = window.location + \"#loaded\";\n      window.location.reload();\n    }\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = Election.networks[networkId];\n      const instance = new web3.eth.Contract(\n        Election.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({\n        web3: web3,\n        ElectionInstance: instance,\n        account: accounts[0],\n      });\n\n      const admin = await this.state.ElectionInstance.methods.getAdmin().call();\n      if (this.state.account === admin) {\n        this.setState({ isAdmin: true });\n      }\n\n      // Get election start and end values\n      const start = await this.state.ElectionInstance.methods.getStart().call();\n      this.setState({ elStarted: start });\n      const end = await this.state.ElectionInstance.methods.getEnd().call();\n      this.setState({ elEnded: end });\n\n      // Getting election details from the contract\n      const adminName = await this.state.ElectionInstance.methods\n        .getAdminName()\n        .call();\n      const adminEmail = await this.state.ElectionInstance.methods\n        .getAdminEmail()\n        .call();\n      const adminTitle = await this.state.ElectionInstance.methods\n        .getAdminTitle()\n        .call();\n      const electionTitle = await this.state.ElectionInstance.methods\n        .getElectionTitle()\n        .call();\n      const organizationTitle = await this.state.ElectionInstance.methods\n        .getOrganizationTitle()\n        .call();\n\n      this.setState({\n        elDetails: {\n          adminName: adminName,\n          adminEmail: adminEmail,\n          adminTitle: adminTitle,\n          electionTitle: electionTitle,\n          organizationTitle: organizationTitle,\n        },\n      });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n      console.error(error);\n    }\n  };\n  // end election\n  endElection = async () => {\n    await this.state.ElectionInstance.methods\n      .endElection()\n      .send({ from: this.state.account, gas: 1000000 });\n    window.location.reload();\n  };\n  // register and start election\n  registerElection = async (data) => {\n    await this.state.ElectionInstance.methods\n      .setElectionDetails(\n        data.adminFName.toLowerCase() + \" \" + data.adminLName.toLowerCase(),\n        data.adminEmail.toLowerCase(),\n        data.adminTitle.toLowerCase(),\n        data.electionTitle.toLowerCase(),\n        data.organizationTitle.toLowerCase()\n      )\n      .send({ from: this.state.account, gas: 1000000 });\n    window.location.reload();\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return (\n        <>\n          <Navbar />\n          <center>Loading Web3, accounts, and contract...</center>\n        </>\n      );\n    }\n    return (\n      <>\n        {this.state.isAdmin ? <NavbarAdmin /> : <Navbar />}\n        <div className=\"container-main\">\n          <div className=\"container-item center-items info\">\n            Your Account: {this.state.account}\n          </div>\n          {!this.state.elStarted & !this.state.elEnded ? (\n            <div className=\"container-item info\">\n              <center>\n                <h3>The election has not been initialize.</h3>\n                {this.state.isAdmin ? (\n                  <p>Set up the election.</p>\n                ) : (\n                  <p>Please wait..</p>\n                )}\n              </center>\n            </div>\n          ) : null}\n        </div>\n        {this.state.isAdmin ? (\n          <>\n            <this.renderAdminHome />\n          </>\n        ) : this.state.elStarted ? (\n          <>\n            <UserHome el={this.state.elDetails} />\n          </>\n        ) : !this.state.isElStarted && this.state.isElEnded ? (\n          <>\n            <div className=\"container-item attention\">\n              <center>\n                <h3>The Election ended.</h3>\n                <br />\n                <Link\n                  to=\"/Results\"\n                  style={{ color: \"black\", textDecoration: \"underline\" }}\n                >\n                  See results\n                </Link>\n              </center>\n            </div>\n          </>\n        ) : null}\n      </>\n    );\n  }\n\n  renderAdminHome = () => {\n    const EMsg = (props) => {\n      return <span style={{ color: \"tomato\" }}>{props.msg}</span>;\n    };\n\n    const AdminHome = () => {\n      // Contains of Home page for the Admin\n      const {\n        handleSubmit,\n        register,\n        formState: { errors },\n      } = useForm();\n\n      const onSubmit = (data) => {\n        this.registerElection(data);\n      };\n\n      return (\n        <div>\n          <form onSubmit={handleSubmit(onSubmit)}>\n            {!this.state.elStarted & !this.state.elEnded ? (\n              <div className=\"container-main\">\n                {/* about-admin */}\n                <div className=\"about-admin\">\n                  <h3>About Admin</h3>\n                  <div className=\"container-item center-items\">\n                    <div>\n                      <label className=\"label-home\">\n                        Full Name{\" \"}\n                        {errors.adminFName && <EMsg msg=\"*required\" />}\n                        <input\n                          className=\"input-home\"\n                          type=\"text\"\n                          placeholder=\"First Name\"\n                          {...register(\"adminFName\", {\n                            required: true,\n                          })}\n                        />\n                        <input\n                          className=\"input-home\"\n                          type=\"text\"\n                          placeholder=\"Last Name\"\n                          {...register(\"adminLName\")}\n                        />\n                      </label>\n\n                      <label className=\"label-home\">\n                        Email{\" \"}\n                        {errors.adminEmail && (\n                          <EMsg msg={errors.adminEmail.message} />\n                        )}\n                        <input\n                          className=\"input-home\"\n                          placeholder=\"eg. you@example.com\"\n                          name=\"adminEmail\"\n                          {...register(\"adminEmail\", {\n                            required: \"*Required\",\n                            pattern: {\n                              value: /^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$/, // email validation using RegExp\n                              message: \"*Invalid\",\n                            },\n                          })}\n                        />\n                      </label>\n\n                      <label className=\"label-home\">\n                        Job Title or Position{\" \"}\n                        {errors.adminTitle && <EMsg msg=\"*required\" />}\n                        <input\n                          className=\"input-home\"\n                          type=\"text\"\n                          placeholder=\"eg. HR Head \"\n                          {...register(\"adminTitle\", {\n                            required: true,\n                          })}\n                        />\n                      </label>\n                    </div>\n                  </div>\n                </div>\n                {/* about-election */}\n                <div className=\"about-election\">\n                  <h3>About Election</h3>\n                  <div className=\"container-item center-items\">\n                    <div>\n                      <label className=\"label-home\">\n                        Election Title{\" \"}\n                        {errors.electionTitle && <EMsg msg=\"*required\" />}\n                        <input\n                          className=\"input-home\"\n                          type=\"text\"\n                          placeholder=\"eg. School Election\"\n                          {...register(\"electionTitle\", {\n                            required: true,\n                          })}\n                        />\n                      </label>\n                      <label className=\"label-home\">\n                        Organization Name{\" \"}\n                        {errors.organizationName && <EMsg msg=\"*required\" />}\n                        <input\n                          className=\"input-home\"\n                          type=\"text\"\n                          placeholder=\"eg. Lifeline Academy\"\n                          {...register(\"organizationTitle\", {\n                            required: true,\n                          })}\n                        />\n                      </label>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ) : this.state.elStarted ? (\n              <UserHome el={this.state.elDetails} />\n            ) : null}\n            <StartEnd\n              elStarted={this.state.elStarted}\n              elEnded={this.state.elEnded}\n              endElFn={this.endElection}\n            />\n            <ElectionStatus\n              elStarted={this.state.elStarted}\n              elEnded={this.state.elEnded}\n            />\n          </form>\n        </div>\n      );\n    };\n    return <AdminHome />;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}